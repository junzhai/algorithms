package com.leetcode.algorithms.minimizeMalwareSpread_924;

import org.junit.Assert;

abstract public class Solution {
    abstract public int minMalwareSpread(int[][] graph, int[] initial);

    public static void main(String[] args) {
        Solution[] solutions = new Solution[]{
//                new MatrixCalculation(),
                new UnionFindSolution()
        };

        for (Solution s : solutions) {
            int ret;

            ret = s.minMalwareSpread(new int[][]{
                    {1, 0, 0, 0},
                    {0, 1, 0, 0},
                    {0, 0, 1, 1},
                    {0, 0, 1, 1}
            }, new int[]{3, 1});
            Assert.assertEquals(3, ret);

            ret = s.minMalwareSpread(new int[][]{
                    {1, 0, 0, 0, 0, 0},
                    {0, 1, 0, 0, 0, 0},
                    {0, 0, 1, 0, 0, 0},
                    {0, 0, 0, 1, 1, 0},
                    {0, 0, 0, 1, 1, 0},
                    {0, 0, 0, 0, 0, 1}
            }, new int[]{5, 0});
            Assert.assertEquals(0, ret);

            ret = s.minMalwareSpread(new int[][]{
                    {1, 1, 0},
                    {1, 1, 0},
                    {0, 0, 1}
            }, new int[]{0, 1});
            Assert.assertEquals(0, ret);

            ret = s.minMalwareSpread(new int[][]{
                    {1, 0, 0},
                    {0, 1, 0},
                    {0, 0, 1}
            }, new int[]{0, 2});
            Assert.assertEquals(0, ret);

            ret = s.minMalwareSpread(new int[][]{
                    {1, 1, 1},
                    {1, 1, 1},
                    {1, 1, 1}
            }, new int[]{1, 2});
            Assert.assertEquals(1, ret);
        }
    }
}