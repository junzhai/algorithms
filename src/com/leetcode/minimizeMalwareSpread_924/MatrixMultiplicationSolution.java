package com.leetcode.minimizeMalwareSpread_924;

import com.pattern.MatrixMultiplication;

@MatrixMultiplication
public class MatrixMultiplicationSolution extends Solution {
    @Override
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int l = graph.length;
        int[][] buf = new int[l][l];
        boolean found = true;
        while (found) {
            found = false;
            for (int r = 0; r < l; r++) {
                for (int c = r; c < l; c++) {
                    if (graph[r][c] == 1) {
                        buf[r][c] = 1;
                        buf[c][r] = 1;
                    } else {
                        for (int i = 0; i < l; i++) {
                            if (graph[r][i] * graph[i][c] == 1) {
                                buf[r][c] = 1;
                                buf[c][r] = 1;
                                found = true;
                                break;
                            }
                        }
                    }
                }
            }
            int[][] tmp = graph;
            graph = buf;
            buf = tmp;
        }

        int max = Integer.MIN_VALUE, ret = 0;
        for (int n : initial) {
            int s = 1;
            for (int i : initial) {
                if (n != i && graph[n][i] == 1) {
                    s = 0;
                    break;
                }
            }

            if (s != 0) {
                for (int i = 0; i < l; i++) {
                    s += graph[n][i];
                }
                s -= 1;
            }

            if (s > max) {
                max = s;
                ret = n;
            } else if (s == max && n < ret) {
                ret = n;
            }
        }

        return ret;
    }
}