package com.leetcode.algorithms.minimizeMalwareSpread_924;

import com.pattern.UnionFind;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

@UnionFind
public class UnionFindSolution extends Solution {
    @Override
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int l = graph.length;
        int[] parent = new int[l], count = new int[l];
        Arrays.fill(parent, -1);
        Arrays.fill(count, 1);

        for (int i = 0; i < l; i++) {
            for (int j = 0; j < l; j++) {
                if (i != j && graph[i][j] == 1) {
                    int n1 = i;
                    while (parent[n1] != -1) {
                        n1 = parent[n1];
                    }
                    int n2 = j;
                    while (parent[n2] != -1) {
                        n2 = parent[n2];
                    }
                    if (n1 < n2) {
                        parent[n2] = n1;
                        count[n1] += count[n2];
                        count[n2] = 0;
                    } else if (n1 > n2) {
                        parent[n1] = n2;
                        count[n2] += count[n1];
                        count[n1] = 0;
                    }
                }
            }
        }

        int[] p = new int[initial.length];

        Map<Integer, Integer> ss = new HashMap<>();
        for (int i = 0; i < initial.length; i++) {
            int n = initial[i];
            while (parent[n] != -1) {
                n = parent[n];
            }

            p[i] = n;
            int v = 1;
            if (ss.containsKey(n)) {
                v = ss.get(n) + 1;
            }
            ss.put(n, v);
        }

        int max = Integer.MIN_VALUE, ret = 0;
        for (int i = 0; i < initial.length; i++) {
            int d = ss.get(p[i]) > 1 ? 0 : count[p[i]];
            if (d > max) {
                max = d;
                ret = initial[i];
            } else if (d == max) {
                ret = Math.min(ret, initial[i]);
            }
        }
        return ret;
    }
}
