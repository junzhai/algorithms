package com.leetcode.algorithms.minimizeMalwareSpreadII_928;

import org.junit.Assert;

abstract public class Solution {
    abstract public int minMalwareSpread(int[][] graph, int[] initial);

    public static void main(String[] args) {
        Solution[] solutions = new Solution[]{
                new DFS(),
                new BFS()
        };

        int ret;

        for (Solution s : solutions) {
            ret = s.minMalwareSpread(new int[][]{
                            {1, 1, 1},
                            {1, 1, 1},
                            {1, 1, 1}
                    },
                    new int[]{1, 2});
            Assert.assertEquals(1, ret);

            ret = s.minMalwareSpread(new int[][]{
                            {1, 0, 0},
                            {0, 1, 0},
                            {0, 0, 1}
                    },
                    new int[]{0, 2});
            Assert.assertEquals(0, ret);

            ret = s.minMalwareSpread(new int[][]{
                            {1, 1, 0},
                            {1, 1, 1},
                            {0, 1, 1}
                    },
                    new int[]{0, 1});
            Assert.assertEquals(1, ret);

            ret = s.minMalwareSpread(new int[][]{
                            {1, 1, 0},
                            {1, 1, 0},
                            {0, 0, 1}
                    },
                    new int[]{0, 1});
            Assert.assertEquals(0, ret);

            ret = s.minMalwareSpread(new int[][]{
                            {1, 1, 0, 0},
                            {1, 1, 1, 0},
                            {0, 1, 1, 1},
                            {0, 0, 1, 1}
                    },
                    new int[]{0, 1});
            Assert.assertEquals(1, ret);

            ret = s.minMalwareSpread(new int[][]{
                            {1, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 1, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 1, 0, 1, 0, 1, 0, 0},
                            {0, 0, 0, 1, 0, 0, 0, 0, 0},
                            {0, 0, 1, 0, 1, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 1, 0, 0, 0},
                            {0, 0, 1, 0, 0, 0, 1, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 1, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 1}
                    },
                    new int[]{6, 0, 4});
            Assert.assertEquals(0, ret);

            ret = s.minMalwareSpread(new int[][]{
                            {1, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 1, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 1, 0, 0, 0, 1, 0, 0},
                            {0, 0, 0, 1, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 1, 0, 1, 0, 0},
                            {0, 0, 0, 0, 0, 1, 0, 0, 0},
                            {0, 0, 1, 0, 1, 0, 1, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 1, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 1}
                    },
                    new int[]{5, 4});
            Assert.assertEquals(4, ret);
        }
    }
}
