package com.leetcode.minimizeMalwareSpreadII_928;

import java.util.HashSet;
import java.util.Set;

@com.pattern.DFS
public class DFS extends Solution {
    @Override
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Set<Integer> infected = new HashSet<>();
        for (int n : initial) {
            infected.add(n);
        }

        int len = graph.length, max = -1, ret = 0;
        boolean[] visited = new boolean[len];
        for (int n : initial) {
            int count = 0;
            for (int i = 0; i < len; i++) {
                if (graph[n][i] == 1 && !infected.contains(i) && !visited[i]) {
                    int t = dfs(graph, n, i, infected, visited);
                    count += t >= 0 ? t : 0;
                }
            }
            if (count > max) {
                max = count;
                ret = n;
            } else if (count == max && n < ret) {
                ret = n;
            }
        }

        return ret;
    }

    private int dfs(int[][] graph, int src, int n, Set<Integer> infected, boolean[] visited) {
        if (infected.contains(n)) {
            return n == src ? 0 : -1;
        }

        visited[n] = true;
        int ret = 1;
        for (int i = 0; i < graph.length; i++) {
            if (graph[n][i] == 1 && n != i && !visited[i]) {
                int t = dfs(graph, src, i, infected, visited);
                if (t >= 0 && ret >= 0) {
                    ret += t;
                } else {
                    ret = -1;
                }
            }
        }
        return ret;
    }
}
