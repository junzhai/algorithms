package com.leetcode.minimizeMalwareSpreadII_928;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

@com.pattern.BFS
public class BFS extends Solution {
    @Override
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int len = graph.length;
        int[] tree = new int[len];
        Arrays.fill(tree, -1);

        Queue<Integer> q = new LinkedList<>();
        Set<Integer> infected = new HashSet<>();
        for (int i : initial) {
            infected.add(i);
            q.offer(i);
            tree[i] = i;
        }

        boolean[] visited = new boolean[len];
        while (!q.isEmpty()) {
            int n = q.poll(), root = n;
            while (tree[root] < len && !infected.contains(tree[root])) {
                root = tree[root];
            }
            for (int i = 0; i < len; i++) {
                if (n != i && graph[n][i] == 1 && !infected.contains(i)) {
                    if (!visited[i]) {
                        q.offer(i);
                        visited[i] = true;
                        tree[i] = n;
                    } else {
                        int root2 = i;
                        while (tree[root2] < len && !infected.contains(tree[root2])) {
                            root2 = tree[root2];
                        }
                        if (tree[root] != tree[root2]) {
                            tree[root] = len;
                            tree[root2] = len;
                        }
                    }
                }
            }
        }

        for (int i : infected) {
            tree[i] = 0;
        }
        for (int i = 0; i < len; i++) {
            if (infected.contains(i)) {
                continue;
            }
            int p = i;
            while (tree[p] >= 0 && tree[p] < len && !infected.contains(tree[p])) {
                p = tree[p];
            }

            if (tree[p] < len && tree[p] >= 0) {
                tree[tree[p]] += 1;
            }
        }

        int ret = -1;
        for (int i = 0, max = -1; i < len; i++) {
            if (infected.contains(i)) {
                if (tree[i] > max) {
                    max = tree[i];
                    ret = i;
                }
            }
        }
        return ret;
    }
}
